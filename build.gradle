/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'
   
    // https://docs.gradle.org/current/userguide/eclipse_plugin.html
    id 'eclipse'

    // https://plugins.gradle.org/plugin/com.github.johnrengelman.plugin-shadow
    // https://github.com/johnrengelman/shadow
    // version works for Gradle 4+ and Java 7+
    id "com.github.johnrengelman.shadow" version "4.0.3"
}

def altJvmArgs = ['-Xms256m', '-Xmx768m', '-noclassgc',\
    '-Dfile.encoding=utf-8', '-Dapple.laf.useScreenMenuBar=false',\
    '-Dapple.awt.showGrowBox=true', '-Dapple.awt.brushMetalLook=false',\
    '-Dapple.awt.antialiasing=on', '-Dapple.awt.graphics.UseQuartz=true']

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

//******************************************************************************
// Plugin Configuration (java)
//******************************************************************************

sourceCompatibility = 1.8
targetCompatibility = 1.8


sourceSets
{
    main
    {
        resources
        {
            srcDir 'src/main/java'
            //include ".*.rsrc"
            exclude "**/.DS_Store", "**/*.java.*"
        }
    }
}


dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// Define the main class for the application
mainClassName = 'UIrepo.App'
//dependancies
repositories
{
    mavenCentral()
}

// DO NOT ADD OR CHANGE DEPENDENCIES WITHOUT EXPLICIT INSTRUCTOR PERMISSION!!!
dependencies
{
    // Apache Commons CSV (commons.apache.org)
    //implementation ('org.apache.commons:commons-csv:1.6')

    // Apache Commons IO (commons.apache.org)
    //implementation ('commons-io:commons-io:2.6')

    // Apache Commons Lang (commons.apache.org/)
    //implementation ('org.apache.commons:commons-lang3:3.8.1')

    // JOGL (jogamp.org)
    compile ('org.jogamp.jogl:jogl-all-main:2.3.2') { transitive = true }
    compile ('org.jogamp.gluegen:gluegen-rt-main:2.3.2') { transitive = true }
}


applicationDefaultJvmArgs = altJvmArgs

//******************************************************************************
// Helper Code for Alternative Start Scripts
//******************************************************************************

// Creates a script for an additional execution entry points (main() method)
// Must apply 'application' plugin to be able to call this method.
// Adapted from http://stackoverflow.com/questions/18421857/
// See also http://stackoverflow.com/questions/21241767/
def createScript(project, jvmOpts, name, mainClass)
{
    project.tasks.create(name: name, type: CreateStartScripts)
    {
        applicationName = name
        mainClassName   = mainClass
        defaultJvmOpts  = jvmOpts
        outputDir       = new File(project.buildDir, 'scripts')
        classpath       = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
    }

    project.tasks[name].dependsOn(project.jar)

    project.applicationDistribution.with
    {
        into("bin")
        {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}

//create scripts for main functions for other classes
createScript(project,altJvmArgs,'collision','Collision.CollisionTestCase')
createScript(project,altJvmArgs,'world','world.Application')
createScript(project,altJvmArgs,'light','light.Application')
